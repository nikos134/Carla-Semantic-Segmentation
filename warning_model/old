 # 1


    # Sometimes(0.5, ...) applies the given augmenter in 50% of all cases,
    # e.g. Sometimes(0.5, GaussianBlur(0.3)) would blur roughly every second
    # image.
    sometimes = lambda aug: iaa.Sometimes(0.5, aug)

    # Define our sequence of augmentation steps that will be applied to every image.
    seq = iaa.Sequential(
        [
            #
            # Apply the following augmenters to most images.
            #
            iaa.Fliplr(0.5), # horizontally flip 50% of all images
            iaa.Flipud(0.2), # vertically flip 20% of all images

            # crop some of the images by 0-10% of their height/width
            sometimes(iaa.Crop(percent=(0, 0.1))),

            # Apply affine transformations to some of the images
            # - scale to 80-120% of image height/width (each axis independently)
            # - translate by -20 to +20 relative to height/width (per axis)
            # - rotate by -45 to +45 degrees
            # - shear by -16 to +16 degrees
            # - order: use nearest neighbour or bilinear interpolation (fast)
            # - mode: use any available mode to fill newly created pixels
            #         see API or scikit-image for which modes are available
            # - cval: if the mode is constant, then use a random brightness
            #         for the newly created pixels (e.g. sometimes black,
            #         sometimes white)
            sometimes(iaa.Affine(
                scale={"x": (0.8, 1.2), "y": (0.8, 1.2)},
                translate_percent={"x": (-0.2, 0.2), "y": (-0.2, 0.2)},
                rotate=(-45, 45),
                shear=(-16, 16),
                order=[0, 1],
                cval=(0, 255),
                mode=ia.ALL
            )),

            #
            # Execute 0 to 5 of the following (less important) augmenters per
            # image. Don't execute all of them, as that would often be way too
            # strong.
            #
            iaa.SomeOf((0, 5),
                [
                    # Convert some images into their superpixel representation,
                    # sample between 20 and 200 superpixels per image, but do
                    # not replace all superpixels with their average, only
                    # some of them (p_replace).
                    sometimes(
                        iaa.Superpixels(
                            p_replace=(0, 1.0),
                            n_segments=(20, 200)
                        )
                    ),

                    # Blur each image with varying strength using
                    # gaussian blur (sigma between 0 and 3.0),
                    # average/uniform blur (kernel size between 2x2 and 7x7)
                    # median blur (kernel size between 3x3 and 11x11).
                    iaa.OneOf([
                        iaa.GaussianBlur((0, 3.0)),
                        iaa.AverageBlur(k=(2, 7)),
                        iaa.MedianBlur(k=(3, 11)),
                    ]),

                    # Sharpen each image, overlay the result with the original
                    # image using an alpha between 0 (no sharpening) and 1
                    # (full sharpening effect).
                    iaa.Sharpen(alpha=(0, 1.0), lightness=(0.75, 1.5)),

                    # Same as sharpen, but for an embossing effect.
                    iaa.Emboss(alpha=(0, 1.0), strength=(0, 2.0)),

                    # Search in some images either for all edges or for
                    # directed edges. These edges are then marked in a black
                    # and white image and overlayed with the original image
                    # using an alpha of 0 to 0.7.
                    sometimes(iaa.OneOf([
                        iaa.EdgeDetect(alpha=(0, 0.7)),
                        iaa.DirectedEdgeDetect(
                            alpha=(0, 0.7), direction=(0.0, 1.0)
                        ),
                    ])),

                    # Add gaussian noise to some images.
                    # In 50% of these cases, the noise is randomly sampled per
                    # channel and pixel.
                    # In the other 50% of all cases it is sampled once per
                    # pixel (i.e. brightness change).
                    iaa.AdditiveGaussianNoise(
                        loc=0, scale=(0.0, 0.05*255), per_channel=0.5
                    ),

                    # Either drop randomly 1 to 10% of all pixels (i.e. set
                    # them to black) or drop them on an image with 2-5% percent
                    # of the original size, leading to large dropped
                    # rectangles.
                    iaa.OneOf([
                        iaa.Dropout((0.01, 0.1), per_channel=0.5),
                        iaa.CoarseDropout(
                            (0.03, 0.15), size_percent=(0.02, 0.05),
                            per_channel=0.2
                        ),
                    ]),

                    # Invert each image's channel with 5% probability.
                    # This sets each pixel value v to 255-v.
                    iaa.Invert(0.05, per_channel=True), # invert color channels

                    # Add a value of -10 to 10 to each pixel.
                    iaa.Add((-10, 10), per_channel=0.5),

                    # Change brightness of images (50-150% of original value).
                    iaa.Multiply((0.5, 1.5), per_channel=0.5),

                    # Improve or worsen the contrast of images.
                    iaa.ContrastNormalization((0.5, 2.0), per_channel=0.5),

                    # Convert each image to grayscale and then overlay the
                    # result with the original with random alpha. I.e. remove
                    # colors with varying strengths.
                    iaa.Grayscale(alpha=(0.0, 1.0)),

                    # In some images move pixels locally around (with random
                    # strengths).
                    sometimes(
                        iaa.ElasticTransformation(alpha=(0.5, 3.5), sigma=0.25)
                    ),

                    # In some images distort local areas with varying strength.
                    sometimes(iaa.PiecewiseAffine(scale=(0.01, 0.05)))
                ],
                # do all of the above augmentations in random order
                random_order=True
            )
        ],
        # do all of the above augmentations in random order
        random_order=True
    )

    images_aug3 = aug(images=image_batch[40:50])
    for k in range(10):
        im = Image.fromarray(images_aug3[k])
        im.save(os.path.join(RGB_VAL_DIR_TO,("e_" + images_val[i*b_size + k + 40])))
























import numpy as np
import imgaug as ia
import imgaug.augmenters as iaa
import os
import skimage.io
import matplotlib.pyplot as plt
from PIL import Image
import PIL
import random

RGB_TRAIN_DIR = "/media/nikos134/DATADRIVE1/CarlaData/25_07/trainData/RGB"

RGB_VAL_DIR = "/media/nikos134/DATADRIVE1/CarlaData/25_07/valData/RGB"


RGB_TRAIN_DIR_TO = "/media/nikos134/DATADRIVE1/WarningDataVer2/trainData"

RGB_VAL_DIR_TO = "/media/nikos134/DATADRIVE1/WarningDataVer2/valData"


b_size = 40

images_train = os.listdir(RGB_TRAIN_DIR)
images_val = os.listdir(RGB_VAL_DIR)
# 539

print(len(images_val))
print(len(images_train))

for i in range(int(len(images_val)/40)):
    print("BATCH: ", i)
    image_batch = np.zeros((b_size, 540, 960, 3), dtype=np.uint8)
    for j in range(b_size):
        idx = images_val[i*b_size + j]
        image = skimage.io.imread(os.path.join(RGB_VAL_DIR, idx))
        if image.shape[-1] == 4:
            image = image[..., :3]
        image_batch[j] = image

    images_aug = image_batch[0:10]
    for k in range(10):
        im = Image.fromarray(images_aug[k])
        temp = "a_" + images_val[i*b_size + k ]
        im.save(os.path.join(RGB_VAL_DIR_TO, temp))

    sometimes = lambda aug: iaa.Sometimes(0.25, aug)

    # 025 Rotation or translation

    aug = iaa.OneOf([
        iaa.Affine(rotate=(-25, 25)),
        iaa.Affine(translate_percent={"x": (-0.1, 0.1), "y": (-0.1, 0.1)})
    ])


    images_aug1 = aug(images=image_batch[10:20])
    for k in range(10):
        im = Image.fromarray(images_aug1[k])
        im.save(os.path.join(RGB_VAL_DIR_TO ,("b_" + images_val[i*b_size + k + 10])))




    # 050 Rotation-Blur


    aug = iaa.Sequential([
        iaa.SomeOf((1,3),[
            iaa.AverageBlur(k=(2, 7)),
            iaa.WithChannels(0, iaa.Affine(rotate=(-20, 20))),


        ]),
        iaa.OneOf([
            iaa.Add((40, 70)),
            iaa.Add((-70, -40))
        ])


    ])


    images_aug2 = aug(images=image_batch[20:30])
    for k in range(10):
        im = Image.fromarray(images_aug2[k])
        im.save(os.path.join(RGB_VAL_DIR_TO, ("c_" + images_val[i*b_size + k + 20])))

    # 075


    aug = iaa.Sequential([
        iaa.OneOf([
            iaa.Dropout(p=(0, 0.3), per_channel=0.5),
            iaa.CoarseDropout((0.0, 0.3), size_percent=(0.01, 0.05))
        ])



    ])


    images_aug3 = aug(images=image_batch[30:40])
    for k in range(10):
        im = Image.fromarray(images_aug3[k])
        im.save(os.path.join(RGB_VAL_DIR_TO,("d_" + images_val[i*b_size + k + 30])))




